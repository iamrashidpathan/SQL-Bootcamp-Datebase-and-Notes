--ADVANCE SQL COMMANDs
-- Timestamp

-- SHOW displays different paramentrs available in SQL
SHOW TIMEZONE;

-- NOW() can be used to get the current timestamptz
SELECT NOW();

-- TIMEOFDAY() gives the same information in form of string
SELECT TIMEOFDAY();

-- CURRENT_TIME or CURRENT_DATE gives just the current time or date without timezone
SELECT CURRENT_TIME;
SELECT CURRENT_DATE;

-- Extracting time and date information
-- EXTRACT (YEAR FROM date_col)
-- AGE function calculates and returns the current age given a timestamp
-- AGE(date_col)

SELECT * FROM payment;
SELECT EXTRACT(YEAR FROM payment_date)AS my_year -- We can use YEAR, MONTH or DAY also
FROM payment;

SELECT EXTRACT(QUARTER FROM payment_date)AS my_quater
FROM payment;

SELECT AGE(payment_date)
FROM payment;

SELECT TO_CHAR(payment_date, 'DAY mm dd yyy')
FROM payment;

SELECT EXTRACT(MONTH FROM payment_date)
FROM payment;

-- Timestamp and extract challenge
SELECT DISTINCT(TO_CHAR(payment_date, 'MONTH'))
FROM payment;

SELECT TO_CHAR(payment_date, 'DAY') AS month_, COUNT(*)
FROM payment
WHERE TO_CHAR(payment_date, 'DAY') = 'MONDAY   '
GROUP BY TO_CHAR(payment_date, 'DAY');

--or

SELECT COUNT(*)
FROM payment
WHERE EXTRACT (dow FROM payment_date) = 1;

-- Mathematical functions and operations
SELECT * FROM film;
SELECT ROUND((rental_rate/replacement_cost),2)*100 FROM film;

-- Strings functions and operations
SELECT LENGTH(first_name) FROM customer;
SELECT UPPER(first_name) || ' ' || UPPER(last_name) AS full_name
FROM customer;

SELECT LOWER(LEFT(first_name,1)) || LOWER(last_name) || '@gmail.com'
AS custom_email
FROM customer;

-- Sub Query
SELECT title, rental_rate FROM film
WHERE rental_rate > (SELECT AVG(rental_rate) FROM film);

SELECT film_id, title
FROM film WHERE film_id IN
(SELECT inventory.film_id
 FROM rental
 INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
 WHERE return_date BETWEEN '2005-05-29' AND '2005-05-30')
 ORDER BY film_id;
 
 -- EXIST operator
 SELECT first_name, last_name
 FROM customer AS c
 WHERE EXISTS
 (SELECT * FROM payment AS p
  WHERE c.customer_id = p.customer_id
  AND amount > 11
 );
 
 -- SELF JOIN
 -- join on the same table.
 -- its important to use alias or table name would be ambiguous
 SELECT * FROM film;
 SELECT f1.title,f2.title, f1.length FROM film AS f1
 JOIN film AS f2
 ON f1.film_id != f2.film_id AND f1.length = f2.length
 WHERE f1.length = f2.length 
 ORDER BY f1.title DESC, f2.title DESC;
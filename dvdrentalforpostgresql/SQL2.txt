-- Aggregation
SELECT MIN (replacement_cost) FROM film;
SELECT MAX (replacement_cost) FROM film;
SELECT MAX (replacement_cost), MIN (replacement_cost) FROM film;

SELECT ROUND(AVG(replacement_cost),2)
FROM film;

SELECT SUM(replacement_cost)
FROM film;

-- GROUP BY
SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY SUM(amount);

SELECT customer_id, staff_id, SUM(amount) FROM payment
GROUP BY staff_id, customer_id
ORDER BY customer_id, staff_id;

--DATE
SELECT DATE(payment_date), SUM (amount) FROM payment
GROUP BY DATE(payment_date)
ORDER BY SUM(amount);

-- GROUP BY challenges
SELECT * FROM payment;
SELECT staff_id, COUNT(*) FROM payment
GROUP BY staff_id
ORDER BY COUNT(*) DESC;

SELECT rating,rental_rate,
ROUND (AVG(replacement_cost),2) FROM film
GROUP BY rating, rental_rate
ORDER BY rating;

SELECT * FROM payment;
SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5;

-- HAVING 
-- filter from aggregate function
SELECT customer_id, SUM(amount) FROM payment
WHERE customer_id NOT IN(184, 87, 477)
GROUP BY customer_id
HAVING SUM(amount) > 131
ORDER BY SUM(amount);

SELECT store_id, COUNT(customer_id) FROM customer
GROUP BY store_id
HAVING COUNT(customer_id) > 300;

-- HAVING challenge
SELECT * FROM payment;
SELECT customer_id, COUNT(amount) FROM payment
GROUP BY customer_id
HAVING COUNT(amount) >= 40
ORDER BY COUNT(amount) DESC;

SELECT customer_id, SUM(amount) FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) > 100;

-- Assessment Test 1
SELECT customer_id, SUM(amount) FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) >= 110;

SELECT COUNT(*) FROM film
WHERE title LIKE 'J%';

SELECT first_name, last_name FROM customer
WHERE first_name LIKE 'E%' AND address_id < 500
ORDER BY customer_id DESC
LIMIT 1;
